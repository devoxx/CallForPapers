  1   GET    /favicon.ico                                                               controllers.Assets.at(path:String = "/public/images", file:String = "favicon.ico")
  2   GET    /                                                                          controllers.Application.index
  3   GET    /home                                                                      controllers.Application.home
  4   GET    /homeVisitor                                                               controllers.Application.homeVisitor
  5   GET    /eventDetails                                                              controllers.RestAPI.eventDetails
  6   GET    /cfp/profile.json                                                          controllers.RestAPI.currentUser
  7   GET    /mobileAuth                                                                controllers.Application.mobileAuth
  8   POST   /mobileAuth                                                                controllers.Authentication.loginWithAuthToken
  9   GET    /status                                                                    controllers.Status.index()
 10   GET    /logout                                                                    controllers.Authentication.logout
 11   POST   /login                                                                     controllers.Authentication.login(visitor:Boolean ?= false)
 12   GET    /signup                                                                    controllers.Authentication.prepareSignup(visitor:Boolean ?= false)
 13   GET    /signup/github                                                             controllers.Authentication.createFromGithub(visitor:Boolean ?= false)
 14   GET    /login/github                                                              controllers.Authentication.githubLogin(visitor:Boolean ?= false)
 15   POST   /github/callback                                                           controllers.Authentication.callbackGithub(visitor:Boolean ?= false)
 16   GET    /github/callback                                                           controllers.Authentication.callbackGithub(visitor:Boolean ?= false)
 17   GET    /uuid                                                                      controllers.Authentication.getUUID(email:String)
 18   GET    /signup/linkedin                                                           controllers.Authentication.createFromLinkedin
 19   GET    /login/linkedin                                                            controllers.Authentication.linkedinLogin(visitor:Boolean ?= false)
 20   POST   /authenticate/linkedin                                                     controllers.Authentication.callbackLinkedin
 21   GET    /authenticate/linkedin                                                     controllers.Authentication.callbackLinkedin
 22   POST   /newspeaker                                                                controllers.Authentication.saveNewSpeaker
 23   GET    /newspeaker/validateMail                                                   controllers.Authentication.validateYourEmailForSpeaker(t:String, a:String)
 24   POST   /newspeaker/validImported                                                  controllers.Authentication.validateImportedSpeaker
 25   POST   /newvisitor                                                                controllers.Authentication.saveNewVisitor
 26   GET    /visitors/validateeMail                                                    controllers.Authentication.validateYourEmailForVisitor(t:String, a:String)
 27   POST   /visitors/validImported                                                    controllers.Authentication.validateImportedVisitor
 28   POST   /visitor/updateprofile                                                     controllers.Favorites.editProfile()
 29   GET    /admin/bootstrapAdminUser                                                  controllers.Backoffice.bootstrapAdminUser(uuid:String)
 30   GET    /admin/clearCaches                                                         controllers.Backoffice.clearCaches()
 31   GET    /notifs/$id<[^/]+>                                                         controllers.CallForPaper.getnotifs(id:String)
 32   GET    /cfp/home/vip/$uuid<[^/]+>                                                 controllers.CallForPaper.vipProposal(uuid:String)
 33   GET    /cfp/home                                                                  controllers.CallForPaper.homeForSpeaker
 34   GET    /cfp/profile                                                               controllers.CallForPaper.editProfile
 35   POST   /cfp/profile                                                               controllers.CallForPaper.saveProfile
 36   GET    /cfp/newSpeakerForExistingWebuser                                          controllers.CallForPaper.newSpeakerForExistingWebuser()
 37   GET    /cfp/newSpeakerForExistingWebuserByUuid                                    controllers.CallForPaper.newSpeakerForExistingWebuserByUuid(webUuid:String)
 38   POST   /cfp/profile/digest                                                        controllers.DigestController.update()
 39   DELETE /cfp/profile/digestTrack                                                   controllers.DigestController.removeFilter()
 40   POST   /cfp/profile/digestTrack                                                   controllers.DigestController.addFilter()
 41   GET    /cfp/profile/digestTracks                                                  controllers.DigestController.getFilter()
 42   GET    /cfp/backoffice/digests                                                    controllers.Backoffice.showDigests()
 43   GET    /cfp/backoffice/triggerDailyDigest                                         controllers.Backoffice.doDailyDigests()
 44   GET    /cfp/backoffice/triggerWeeklyDigest                                        controllers.Backoffice.doWeeklyDigests()
 45   POST   /cfp/profile/phoneNumber                                                   controllers.CallForPaper.updatePhoneNumber()
 46   POST   /cfp/profile/phoneNumber/confirm                                           controllers.CallForPaper.confirmPhone()
 47   POST   /cfp/profile/digest                                                        controllers.DigestController.update()
 48   GET    /cfp/backoffice/digests                                                    controllers.Backoffice.showDigests()
 49   GET    /cfp/proposal/new                                                          controllers.CallForPaper.newProposal()
 50   POST   /cfp/proposal/preview                                                      controllers.CallForPaper.previewProposal()
 51   POST   /cfp/proposal/save                                                         controllers.CallForPaper.saveProposal()
 52   GET    /cfp/proposal/tags/autocomplete                                            controllers.CallForPaper.autoCompleteTag(term:String ?= "")
 53   GET    /cfp/proposal/edit/$proposalId<[^/]+>                                      controllers.CallForPaper.editProposal(proposalId:String)
 54   GET    /cfp/proposal/edit/$proposalId<[^/]+>/speakers                             controllers.CallForPaper.editOtherSpeakers(proposalId:String)
 55   POST   /cfp/proposal/save/$proposalId<[^/]+>/speakers                             controllers.CallForPaper.saveOtherSpeakers(proposalId:String)
 56   GET    /cfp/proposal/delete/$proposalId<[^/]+>                                    controllers.CallForPaper.deleteProposal(proposalId:String)
 57   GET    /cfp/proposal/undelete/$proposalId<[^/]+>                                  controllers.CallForPaper.undeleteProposal(proposalId:String)
 58   GET    /cfp/proposal/submit/$proposalId<[^/]+>                                    controllers.CallForPaper.submitProposal(proposalId:String)
 59   GET    /cfp/comment/$proposalId<[^/]+>                                            controllers.CallForPaper.showCommentForProposal(proposalId:String)
 60   POST   /cfp/comment/$proposalId<[^/]+>                                            controllers.CallForPaper.sendMessageToCommittee(proposalId:String)
 61   GET    /notif/subscribeToEvent                                                    controllers.CFPAdmin.subscribeTonotif(uuid:String, event:String)
 62   GET    /notif/unsubscribeToEvent                                                  controllers.CFPAdmin.unsubscribeTonotif(uuid:String, event:String)
 63   GET    /forget                                                                    controllers.Authentication.forgetPassword
 64   POST   /forget/validate                                                           controllers.Authentication.doForgetPassword()
 65   GET    /resetpassword                                                             controllers.Authentication.resetPassword(t:String, a:String)
 66   GET    /signup/google                                                             controllers.Authentication.createFromGoogle
 67   GET    /login/google                                                              controllers.Authentication.googleLogin(visitor:Boolean ?= false)
 68   GET    /googleoauth2callback                                                      controllers.Authentication.callbackGoogle
 69   POST   /googleoauth2callback                                                      controllers.Authentication.callbackGoogle
 70   GET    /bug                                                                       controllers.Application.bugReport
 71   POST   /bug/new                                                                   controllers.Application.submitIssue()
 72   GET    /verifyRegId/$regId<[^/]+>                                                 controllers.CFPAdmin.verifyRegId(regId:String)
 73   GET    /cfpadmin                                                                  controllers.CFPAdmin.index(page:Int ?= 0, sort:Option[String] ?= None, ascdesc:Option[String] ?= None, track:Option[String] ?= None)
 74   GET    /cfpadmin/proposal/$proposalId<[^/]+>                                      controllers.CFPAdmin.openForReview(proposalId:String)
 75   GET    /cfpadmin/proposal/$proposalId<[^/]+>/history                              controllers.CFPAdmin.history(proposalId:String)
 76   POST   /cfpadmin/proposal/$proposalId<[^/]+>/msgToSpeaker                         controllers.CFPAdmin.sendMessageToSpeaker(proposalId:String)
 77   POST   /cfpadmin/proposal/$proposalId<[^/]+>/postInternal                         controllers.CFPAdmin.postInternalMessage(proposalId:String)
 78   GET    /cfpadmin/proposal/$proposalId<[^/]+>/vote                                 controllers.CFPAdmin.voteForProposal(proposalId:String)
 79   GET    /cfpadmin/proposal/$proposalId<[^/]+>/clearVote                            controllers.CFPAdmin.clearVoteForProposal(proposalId:String)
 80   GET    /cfpadmin/proposal/$proposalId<[^/]+>/score                                controllers.CFPAdmin.showVotesForProposal(proposalId:String)
 81   GET    /cfpadmin/proposals/byType/$confType<[^/]+>                                controllers.CFPAdmin.allProposalsByType(confType:String)
 82   GET    /cfpadmin/proposals/byTrack/$track<[^/]+>                                  controllers.CFPAdmin.allProposalsByTrack(track:String)
 83   GET    /cfpadmin/proposals/withNoVotes                                            controllers.CFPAdmin.showProposalsWithNoVotes()
 84   GET    /cfpadmin/proposals/byTag/$tagId<[^/]+>                                    controllers.CFPAdmin.showProposalsByTagId(tagId:String)
 85   GET    /cfpadmin/proposal/starred/$proposalId<[^/]+>                              controllers.CFPAdmin.isProposalStarred(proposalId:String)
 86   POST   /cfpadmin/proposal/star/$proposalId<[^/]+>                                 controllers.CFPAdmin.starProposal(proposalId:String)
 87   GET    /cfpadmin/starProposals                                                    controllers.CFPAdmin.allStarProposals()
 88   GET    /cfpadmin/preview                                                          controllers.CFPAdmin.previewProposal()
 89   POST   /cfpadmin/previewnext                                                      controllers.CFPAdmin.saveProposal()
 90   GET    /cfpadmin/createNewproposal                                                controllers.CFPAdmin.createNewproposal()
 91   GET    /cfpadmin/myvotes                                                          controllers.CFPAdmin.allMyVotes(talkType:String ?= "conf")
 92   GET    /cfpadmin/allvotes/$confType<[^/]+>                                        controllers.CFPAdmin.allVotes(confType:String, track:Option[String])
 93   GET    /cfpadmin/allEagerSpeakers                                                 controllers.CFPAdmin.allEagerSpeakers()
 94   GET    /cfpadmin/notifyForSched                                                   controllers.CFPAdmin.notifySpeakerForSchedule(uuid:String)
 95   GET    /cfpadmin/notifyAllForSchedule                                             controllers.CFPAdmin.notifyAllSpeakersForSchedule
 96   GET    /cfpadmin/allWebusers/sendForTalk                                          controllers.CFPAdmin.sendEmailForTalk(uuid:String)
 97   GET    /cfpadmin/advancedsearch                                                   controllers.CFPAdmin.advancedSearch(q:Option[String] ?= None, p:Option[Int] ?= None)
 98   GET    /cfpadmin/allSponsorTalks                                                  controllers.CFPAdmin.allSponsorTalks
 99   GET    /cfpadmin/speaker/$uuidSpeaker<[^/]+>                                      controllers.CFPAdmin.showSpeakerAndTalks(uuidSpeaker:String)
100   GET    /cfpadmin/sponsorTalk/remove/$proposalId<[^/]+>                            controllers.CFPAdmin.removeSponsorTalkFlag(proposalId:String)
101   GET    /cfpadmin/compareReviewer                                                  controllers.CFPAdmin.showProposalsNotReviewedCompareTo(maybeReviewer:Option[String])
102   GET    /cfpadmin/allvisitors                                                      controllers.CFPAdmin.allVisitiors()
103   GET    /cfpadmin/allWebusers                                                      controllers.CFPAdmin.allWebusers()
104   POST   /cfpadmin/cfpWebusers/trackLeadersAndReviewers                             controllers.CFPAdmin.updateTrackLeadersAndReviewers()
105   GET    /cfpadmin/allCFPWebusers                                                   controllers.CFPAdmin.allCFPWebusers()
106   GET    /cfpadmin/allvis                                                           controllers.CFPAdmin.notifyVisitors()
107   GET    /cfpadmin/allSpeakers                                                      controllers.CFPAdmin.allSpeakers()
108   GET    /cfpadmin/duplicateSpeakers                                                controllers.CFPAdmin.duplicateSpeakers()
109   GET    /cfpadmin/allDevoxxians                                                    controllers.CFPAdmin.allDevoxxians()
110   GET    /cfpadmin/allSpeakersExport                                                controllers.CFPAdmin.allSpeakersExport()
111   GET    /cfpadmin/allSpeakers/approvedTalks                                        controllers.CFPAdmin.allSpeakersWithApprovedTalks()
112   GET    /cfpadmin/allSpeakers/approvedTalks/byCompany                              controllers.CFPAdmin.allApprovedSpeakersByCompany(showQuickiesAndBof:Boolean ?= false)
113   GET    /cfpadmin/allSpeakers/whoHaveAnswereQandA                                  controllers.CFPAdmin.allSpeakersWhoHaveAnsweredQandA()
114   GET    /cfpadmin/allSpeakers/whoHaveNotAnswereQandA                               controllers.CFPAdmin.allSpeakersWhoHaveNotAnsweredQandA()
115   GET    /cfpadmin/allUsersWithIncompleteSpeakerProfile                             controllers.CFPAdmin.allUsersWithIncompleteSpeakerProfile()
116   GET    /cfpadmin/leaderboard                                                      controllers.LeaderboardController.leaderBoard
117   GET    /cfpadmin/leaderboard/reviewerStats                                        controllers.LeaderboardController.allReviewersAndStats
118   GET    /cfpadmin/leaderboard/compute                                              controllers.LeaderboardController.doComputeLeaderBoard
119   GET    /cfpadmin/leaderboard/reviewerStatsData                                    controllers.LeaderboardController.dataForAllReviewersAndStats
120   GET    /cfpadmin/leaderboard/proposals/companies                                  controllers.LeaderboardController.allProposalsByCompany()
121   GET    /cfpadmin/leaderboard/proposals/companies/graph                            controllers.LeaderboardController.allProposalsByCompanyAsGraph()
122   GET    /cfpadmin/leaderboard/proposals/companies/data                             controllers.LeaderboardController.dataForAllProposalsByCompany()
123   GET    /cfpadmin/recompute/allvotes                                               controllers.LeaderboardController.doComputeVotesTotal()
124   GET    /cfpadmin/stats                                                            controllers.LeaderboardController.statsAppAcc()
125   GET    /cfpadmin/seeEvents                                                        controllers.CFPAdmin.seeEvents(page:Int ?= 0, sort:Option[String] ?= None, ascdesc:Option[String] ?= None, track:Option[String] ?= None)
126   GET    /cfpadmin/allSpeakers/acceptedTalks/forgetToAccept                         controllers.CFPAdmin.allSpeakersThatForgetToAccept()
127   GET    /cfpadmin/allSpeakers/acceptedTalks/withBadge                              controllers.CFPAdmin.allSpeakersWithAcceptedTalksAndBadge()
128   GET    /cfpadmin/allSpeakers/acceptedTalks/all                                    controllers.CFPAdmin.allSpeakersWithAcceptedTalks()
129   GET    /cfpadmin/allSpeakers/rejectedTalks/all                                    controllers.CFPAdmin.allSpeakersWithRejectedTalks()
130   GET    /cfpadmin/allSpeakers/acceptedTalks/export                                 controllers.CFPAdmin.allSpeakersWithAcceptedTalksForExport()
131   GET    /cfpadmin/allSpeakers/invited                                              controllers.InviteController.allInvitations()
132   GET    /cfpadmin/cfpstatut                                                        controllers.CFPAdmin.managecfp()
133   GET    /cfpadmin/setPreferredDay                                                  controllers.CFPAdmin.setPreferredDay(proposalId:String, day:String)
134   GET    /cfpadmin/resetPreferredDay                                                controllers.CFPAdmin.resetPreferredDay(proposalId:String)
135   GET    /cfpadmin/saveSpeakerAndTalk                                               controllers.CFPAdmin.retour()
136   GET    /cfpadmin/deleteVisitor                                                    controllers.CFPAdmin.deleteVisitor(id:String)
137   GET    /cfpadmin/newOrEditSpeaker                                                 controllers.CFPAdmin.newOrEditSpeaker(speakerUUID:Option[String])
138   POST   /cfpadmin/saveNewSpeaker                                                   controllers.CFPAdmin.saveNewSpeaker()
139   POST   /cfpadmin/saveNewSpeakerOnly                                               controllers.CFPAdmin.saveNewSpeakerOnly()
140   POST   /cfpadmin/saveSpeakerAndTalk                                               controllers.CFPAdmin.saveSpeakerAndTalk()
141   GET    /cfpadmin/newspeakerOnly                                                   controllers.CFPAdmin.newSpeakerOnly(speakerUUID:Option[String])
142   POST   /cfpadmin/newvisitor                                                       controllers.CFPAdmin.saveNewVisitoByAdmin
143   GET    /cfpadmin/validatevisitor                                                  controllers.CFPAdmin.validateYourEmailForVisitorByAdmin(t:String, a:String)
144   POST   /cfpadmin/savewithstate                                                    controllers.CFPAdmin.saveProposalWithState(state:String)
145   POST   /admin/propupdate                                                          controllers.CFPAdmin.saveproposalByAdmin(ids:String)
146   GET    /admin/propsedit                                                           controllers.CFPAdmin.editProposalByAdmin(proposalId:String, id:String)
147   GET    /admin                                                                     controllers.Backoffice.homeBackoffice()
148   POST   /admin/createspeaker                                                       controllers.CFPAdmin.saveNewSpeakerByAdmin()
149   GET    /admin/webusers/switch                                                     controllers.Backoffice.switchCFPAdmin(uuid:String)
150   GET    /admin/proposals/all                                                       controllers.Backoffice.allProposals(proposalId:Option[String] ?= None)
151   GET    /admin/proposals/declined                                                  controllers.Backoffice.showAllDeclined()
152   GET    /admin/proposals/changeState/$proposalId<[^/]+>                            controllers.Backoffice.changeProposalState(proposalId:String, state:String)
153   GET    /admin/generateEmails                                                      controllers.CFPAdmin.generateTemplateEmailsFromStatics()
154   GET    /admin/notification/manage                                                 controllers.CFPAdmin.manageNotification()
155   POST   /admin/notification/manage                                                 controllers.CFPAdmin.saveManageNotification()
156   POST   /admin/notification/updateMails                                            controllers.CFPAdmin.updateManageNotification()
157   GET    /admin/notification/saveOrEdit                                             controllers.CFPAdmin.saveOrUpdateNotification(eventType:String, MailsId:Option[String] ?= None)
158   GET    /admin/notification/deleted                                                controllers.CFPAdmin.deleteMail(id:String)
159   GET    /cfpadmin/allWebusersm                                                     controllers.CFPAdmin.disablecreatetalk(uuid:String)
160   POST   /admin/deleteSpeaker/$speakerUUIDToDelete<[^/]+>                           controllers.Backoffice.deleteSpeaker(speakerUUIDToDelete:String)
161   GET    /admin/cleanUpVotesIfUserWasDeleted                                        controllers.Backoffice.cleanUpVotesIfUserWasDeleted
162   GET    /admin/deleteAllVotes                                                      controllers.Backoffice.deleteVotesForPropal(proposalId:String)
163   GET    /admin/submittedByDate                                                     controllers.Backoffice.submittedByDate()
164   GET    /visitor/allfavs                                                           controllers.Favorites.getAllfavByVisitors(webuserId:String)
165   GET    /admin/authenticateAs/$uuid<[^/]+>                                         controllers.Backoffice.authenticateAs(uuid:String)
166   GET    /admin/authenticateAndCreate/$uuid<[^/]+>                                  controllers.Backoffice.authenticateAndCreateTalk(uuid:String)
167   GET    /admin/elastic/reset                                                       controllers.Backoffice.doResetAndConfigureElasticSearch()
168   GET    /admin/elastic/index                                                       controllers.Backoffice.doIndexElasticSearch()
169   GET    /admin/sanitycheck                                                         controllers.Backoffice.sanityCheckSchedule()
170   GET    /admin/sanitycheck/fix                                                     controllers.Backoffice.fixToAccepted(slotId:String, proposalId:String, talkType:String)
171   GET    /admin/sanitycheck/proposals                                               controllers.Backoffice.sanityCheckProposals()
172   GET    /admin/reminder/trigger                                                    controllers.Backoffice.sendDraftReminder()
173   GET    /admin/tags/list                                                           controllers.Backoffice.showAllTags()
174   GET    /admin/tags/new                                                            controllers.Backoffice.newTag()
175   POST   /admin/tags/edit/$uuid<[^/]+>                                              controllers.Backoffice.editTag(uuid:String)
176   GET    /admin/tags/import                                                         controllers.Backoffice.importTags()
177   GET    /admin/tags/export                                                         controllers.Backoffice.exportTags()
178   POST   /admin/tag/save                                                            controllers.Backoffice.saveTag()
179   POST   /admin/tags/saveAll                                                        controllers.Backoffice.saveImportTags()
180   POST   /admin/tag/   DELETE /$uuid<[^/]+>                                         controllers.Backoffice.deleteTag(uuid:String)
181   GET    /admin/tags                                                                controllers.Backoffice.getProposalsByTags()
182   GET    /admin/cloudTag                                                            controllers.Backoffice.getCloudTag()
183   POST   /admin/push/message                                                        controllers.Backoffice.pushNotifications()
184   GET    /admin/favorites                                                           controllers.Favorites.showAllForAdmin()
185   GET    /admin/manageSlots                                                         controllers.CFPAdmin.manageSlots()
186   POST   /admin/saveslot                                                            controllers.CFPAdmin.saveslot(action:String)
187   GET    /admin/deleteSlot                                                          controllers.CFPAdmin.deleteSlot(slotid:String)
188   GET    /admin/updateslot                                                          controllers.CFPAdmin.updateslot(slotid:String)
189   GET    /admin/cloneslot                                                           controllers.CFPAdmin.cloneSlot(slotid:String)
190   GET    /admin/manageRoom                                                          controllers.CFPAdmin.manageRoom()
191   POST   /admin/saveroom                                                            controllers.CFPAdmin.saveRoom(action:String)
192   GET    /admin/deleteRoom                                                          controllers.CFPAdmin.deleteRoom(roomid:String)
193   GET    /admin/updateRoom                                                          controllers.CFPAdmin.updateRoom(roomid:String)
194   GET    /admin/cloneRoom                                                           controllers.CFPAdmin.cloneRoom(roomid:String)
195   GET    /admin/changeStatus                                                        controllers.CFPAdmin.changeEmailConfiguration(statut:String)
196   GET    /ar/preaccept/$proposalId<[^/]+>                                           controllers.ApproveOrRefuse.doApprove(proposalId:String)
197   GET    /ar/refuse/$proposalId<[^/]+>                                              controllers.ApproveOrRefuse.doRefuse(proposalId:String)
198   GET    /ar/cancelPreaccept/$proposalId<[^/]+>                                     controllers.ApproveOrRefuse.cancelApprove(proposalId:String)
199   GET    /ar/cancelPrerefuse/$proposalId<[^/]+>                                     controllers.ApproveOrRefuse.cancelRefuse(proposalId:String)
200   POST   /ar/notifyApprovecustom/$talkType<[^/]+>                                   controllers.ApproveOrRefuse.notifycustomemailapproved(talkType:String, proposalId:String)
201   POST   /ar/notifyRefusecustom/$talkType<[^/]+>                                    controllers.ApproveOrRefuse.notifycustomemailrefused(talkType:String, proposalId:String)
202   GET    /ar/notifyRefuedAll/$talkType<[^/]+>                                       controllers.ApproveOrRefuse.notifyrefusedAll(talkType:String)
203   POST   /ar/notifyApprovedAll/$talkType<[^/]+>                                     controllers.ApproveOrRefuse.notifyApproveddAll(talkType:String)
204   GET    /ar/allApproved/$talkType<[^/]+>                                           controllers.ApproveOrRefuse.allApprovedByTalkType(talkType:String)
205   GET    /ar/allRefused/$talkType<[^/]+>                                            controllers.ApproveOrRefuse.allRefusedByTalkType(talkType:String)
206   POST   /ar/notifyApprove/$talkType<[^/]+>                                         controllers.ApproveOrRefuse.notifyApprove(talkType:String, proposalId:String)
207   GET    /ar/notifyApprove/$talkType<[^/]+>                                         controllers.ApproveOrRefuse.notifyApprove(talkType:String, proposalId:String)
208   GET    /ar/notifyRefuse/$talkType<[^/]+>                                          controllers.ApproveOrRefuse.notifyRefused(talkType:String, proposalId:String)
209   GET    /ar/showAcceptTerms                                                        controllers.ApproveOrRefuse.showAcceptTerms()
210   GET    /ar/accept                                                                 controllers.ApproveOrRefuse.acceptTermsAndConditions()
211   GET    /ar/acceptOrRefuseTalks                                                    controllers.ApproveOrRefuse.showAcceptOrRefuseTalks()
212   POST   /ar/acceptOrRefuseTalks                                                    controllers.ApproveOrRefuse.doAcceptOrRefuseTalk()
213   GET    /ar/decline                                                                controllers.ApproveOrRefuse.declineTermsAndConditions()
214   POST   /ar/replyTalks                                                             controllers.ApproveOrRefuse.doReplyLaterTalks()
215   POST   /ar/acceptTalks                                                            controllers.ApproveOrRefuse.doAcceptTalks()
216   GET    /ar/prepareMassRefuse                                                      controllers.ApproveOrRefuse.prepareMassRefuse(confType:String ?= "conf")
217   GET    /ar/doMassRefuseAndRedirect                                                controllers.ApproveOrRefuse.doRefuseAndRedirectToMass(proposalId:String, confType:String)
218   POST   /ar/notifyApproveAfeterrefuse/$talkType<[^/]+>                             controllers.ApproveOrRefuse.notifyafterrefused(talkType:String, proposalId:String)
219   GET    /ar/notifyToAccepteTermAndTerm                                             controllers.ApproveOrRefuse.notifyallAcceptedtoAcceptteTermeAndCondition()
220   GET    /cloudtags                                                                 controllers.CallForPaper.cloudTags()
221   GET    /2018/speakers.html                                                        controllers.Publisher.showAllSpeakers()
222   GET    /2018/speaker/$cleanName<[^/]+>                                            controllers.Publisher.showSpeakerByName(cleanName:String)
223   GET    /2018/talks/$talkType<[^/]+>                                               controllers.Publisher.showByTalkType(talkType:String)
224   GET    /2018/tag/$tagId<[^/]+>                                                    controllers.Publisher.showByTag(tagId:String)
225   GET    /2018/talk/$proposalId<[^/]+>                                              controllers.Publisher.showDetailsForProposal(proposalId:String, proposalTitle:String = "")
226   GET    /2018/talk/$proposalId<[^/]+>/$proposalTitle<[^/]+>                        controllers.Publisher.showDetailsForProposal(proposalId:String, proposalTitle:String)
227   GET    /2018/talks                                                                controllers.Publisher.showAllTalksByType()
228   GET    /2018/index.html                                                           controllers.Publisher.homePublisher()
229   GET    /2018/agenda/$confType<[^/]+>/$day<[^/]+>                                  controllers.Publisher.showAgendaByConfType(confType:String, slotId:Option[String], day:String)
230   GET    /2018/byday/$day<[^/]+>                                                    controllers.Publisher.showByDay(day:String)
231   GET    /2018/search                                                               controllers.Publisher.search(q:Option[String] ?= None, p:Option[Int] ?= None)
232   GET    /2018/sitemap.xml                                                          controllers.Assets.at(path:String = "/public/devoxxuk2018", file:String = "sitemap.xml")
233   GET    /myfavSchedule                                                             controllers.Favorites.favSchedule
234   GET    /myagenda                                                                  controllers.Favorites.home
235   GET    /newvisitor/welcome                                                        controllers.Favorites.welcomeVisitor(talkType:Option[String] ?= None)
236   GET    /favorites/proposal/$proposalId<[^/]+>                                     controllers.Favorites.isFav(proposalId:String)
237   POST   /favorites/likeOrUnlink                                                    controllers.Favorites.likeOrUnlike()
238   GET    /favorites/add                                                             controllers.Favorites.addAsFavorite(idP:String)
239   GET    /favorites/del                                                             controllers.Favorites.removefromFavorite(idP:String)
240   GET    /visitor/favorites/add                                                     controllers.Favorites.addAsFavoritev2(idP:String)
241   GET    /visitor/favorites/del                                                     controllers.Favorites.removefromFavoritev2(idP:String)
242   GET    /auth/jwtCallback/$token<[^/]+>                                            controllers.Authentication.jwtCallback(token:String)
243   GET    /api                                                                       controllers.RestAPI.index()
244   GET    /api/notif/receivers/$typ<[^/]+>                                           controllers.RestAPI.getNotifReceiversBytype(typ:String)
245   GET    /api/conferences/                                                          controllers.RestAPI.redirectToConferences()
246   GET    /api/conferences                                                           controllers.RestAPI.showAllConferences()
247   GET    /api/conferences/$eventCode<[^/]+>                                         controllers.RestAPI.showConference(eventCode:String)
248   GET    /api/conferences/$eventCode<[^/]+>/occupiedrooms/$day<[^/]+>               controllers.RestAPI.showRoomsWithtalkNotBreak(eventCode:String, day:String)
249   GET    /api/conferences/$eventCode<[^/]+>/speakers/                               controllers.RestAPI.redirectToSpeakers(eventCode:String)
250   GET    /api/conferences/$eventCode<[^/]+>/speakers                                controllers.RestAPI.showSpeakers(eventCode:String)
251   GET    /api/conferences/$eventCode<[^/]+>/slots/                                  controllers.RestAPI.showSlots(eventCode:String)
252   GET    /api/conferences/$eventCode<[^/]+>/speakers/$uuid<[^/]+>                   controllers.RestAPI.showSpeaker(eventCode:String, uuid:String)
253   GET    /api/conferences/$eventCode<[^/]+>/rooms/$room<[^/]+>/$day<[^/]+>          controllers.RestAPI.showScheduleForRoom(eventCode:String, room:String, day:String)
254   GET    /api/conferences/$eventCode<[^/]+>/rooms/                                  controllers.RestAPI.showRooms(eventCode:String)
255   GET    /api/conferences/$eventCode<[^/]+>/topFavedTalks                           controllers.RestAPI.topFavedTalks(eventCode:String, limit:Int ?= 10)
256   GET    /api/conferences/$eventCode<[^/]+>/talks/                                  controllers.RestAPI.redirectToTalks(eventCode:String)
257   GET    /api/conferences/$eventCode<[^/]+>/talks                                   controllers.RestAPI.showApprovedTalks(eventCode:String)
258   GET    /api/conferences/$eventCode<[^/]+>/talks/$id<[^/]+>                        controllers.RestAPI.showTalk(eventCode:String, id:String)
259   GET    /api/conferences/$eventCode<[^/]+>/talks/$id<[^/]+>/slot                   controllers.RestAPI.showTalkSlot(eventCode:String, id:String)
260   GET    /api/conferences/$eventCode<[^/]+>/schedules/                              controllers.RestAPI.showAllSchedules(eventCode:String)
261   GET    /api/conferences/$eventCode<[^/]+>/schedules/$day<[^/]+>                   controllers.RestAPI.showScheduleFor(eventCode:String, day:String)
262   GET    /api/conferences/$eventCode<[^/]+>/schedules/$day<[^/]+>/                  controllers.RestAPI.showScheduleFor(eventCode:String, day:String)
263   GET    /api/conferences/$eventCode<[^/]+>/schedules/$day<[^/]+>/$talkType<[^/]+>  controllers.RestAPI.showScheduleForByType(eventCode:String, day:String, talkType:String)
264   GET    /api/conferences/$eventCode<[^/]+>/scheduleTypes/$confType<[^/]+>          controllers.RestAPI.showScheduleForConfType(eventCode:String, confType:String)
265   GET    /api/conferences/$eventCode<[^/]+>/proposalTypes                           controllers.RestAPI.showProposalTypes(eventCode:String)
266   GET    /api/conferences/$eventCode<[^/]+>/tracks                                  controllers.RestAPI.showTracks(eventCode:String)
267   GET    /api/profile/$docName<[^/]+>                                               controllers.RestAPI.profile(docName:String)
268   POST   /api/account/verify                                                        controllers.RestAPI.verifyAccount()
269   GET    /api/proposals/$uuid<[^/]+>/scheduled                                      controllers.Favorites.scheduledProposals(uuid:String)
270   DELETE /api/proposals/$uuid<[^/]+>/scheduled/$proposalId<[^/]+>                   controllers.Favorites.removeScheduledProposal(uuid:String, proposalId:String)
271   POST   /api/proposals/$uuid<[^/]+>/schedule/$proposalId<[^/]+>                    controllers.Favorites.scheduleProposal(uuid:String, proposalId:String)
272   GET    /api/proposals/favorites                                                   controllers.Favorites.allFavorites()
273   GET    /api/proposals/$uuid<[^/]+>/favored                                        controllers.Favorites.favoredProposals(uuid:String)
274   DELETE /api/proposals/$uuid<[^/]+>/favored/$proposalId<[^/]+>                     controllers.Favorites.removeFavoredProposal(uuid:String, proposalId:String)
275   POST   /api/proposals/$uuid<[^/]+>/favor/$proposalId<[^/]+>                       controllers.Favorites.favorProposal(uuid:String, proposalId:String)
276   GET    /api/search/talks                                                          controllers.SearchAPI.index()
277   POST   /api/search/talks                                                          controllers.SearchAPI.searchTalks()
278   GET    /api/regIdExist/$regId<[^/]+>                                              controllers.RestAPI.regIdExist(regId:String)
279   GET    /schedulling/slots                                                         controllers.SchedullingController.slots(confType:String)
280   GET    /schedulling/approvedTalks                                                 controllers.SchedullingController.approvedTalks(confType:String)
281   GET    /schedulling/scheduledConfigurations                                       controllers.SchedullingController.allScheduledConfiguration()
282   GET    /schedulling/loadScheduledConfiguration                                    controllers.SchedullingController.loadScheduledConfiguration(id:String)
283   POST   /schedulling/slots                                                         controllers.SchedullingController.saveSlots(confType:String)
284   DELETE /schedulling/deletescheduledConfigurations                                 controllers.SchedullingController.deleteScheduleConfiguration(id:String)
285   POST   /schedulling/publish                                                       controllers.SchedullingController.publishScheduleConfiguration()
286   GET    /schedulling/published                                                     controllers.SchedullingController.getPublishedSchedule(confType:String, day:Option[String])
287   POST   /api/agenda/$proposalId<[^/]+>                                             controllers.Favorites.toggleProposalToAgenda(proposalId:String)
288   GET    /schedulling/setSchedulingInProgressMessageTo                              controllers.Backoffice.setSchedulingInProgressMessageTo(displayStatus:String)
289   GET    /schedulling/newOrUpdateCFPDates                                           controllers.Backoffice.newOrUpdateCFPDates()
290   POST   /schedulling/saveCFPDates                                                  controllers.Backoffice.saveCFPDates()
291   GET    /cfpadmin/wishlist/home                                                    controllers.Wishlist.homeWishList()
292   GET    /cfpadmin/wishlist/new                                                     controllers.Wishlist.newRequestToTalk()
293   POST   /cfpadmin/wishlist/saveNew                                                 controllers.Wishlist.saveNewRequestToTalk()
294   GET    /cfpadmin/wishlist/edit/$requestId<[^/]+>                                  controllers.Wishlist.edit(requestId:String)
295   POST   /cfpadmin/wishlist/saveedit                                                controllers.Wishlist.saveEdit()
296   GET    /cfpadmin/wishlist/delete/$requestId<[^/]+>                                controllers.Wishlist.deleteRequest(requestId:String)
297   GET    /cfpadmin/wishlist/approve/$requestId<[^/]+>                               controllers.Wishlist.speakerApproveRequest(requestId:String)
298   GET    /cfpadmin/wishlist/decline/$requestId<[^/]+>                               controllers.Wishlist.speakerDeclineRequest(requestId:String)
299   GET    /cfpadmin/wishlist/speaker/setPersonInCharge/$requestId<[^/]+>             controllers.Wishlist.setPersonInCharge(requestId:String, userId:String)
300   GET    /cfpadmin/wishlist/speaker/unsetPersonInCharge/$requestId<[^/]+>           controllers.Wishlist.unsetPersonInCharge(requestId:String)
301   GET    /cfpadmin/wishlist/speaker/selectPersonInCharge/$requestId<[^/]+>          controllers.Wishlist.selectPersonInCharge(requestId:String, speakerName:String)
302   GET    /cfpadmin/invitations                                                      controllers.InviteController.allInvitations()
303   GET    /cfpadmin/invitations/invite                                               controllers.InviteController.invite(speakerUUID:String)
304   GET    /cfpadmin/invitations/cancel                                               controllers.InviteController.cancelInvite(speakerUUID:String)
305   GET    /cfpadmin/attic/home                                                       controllers.Attic.atticHome()
306   POST   /cfpadmin/attic/pruneDraft                                                 controllers.Attic.prune()
307   POST   /cfpadmin/attic/doArchive                                                  controllers.Attic.doArchive()
308   POST   /cfpadmin/attic/doArchiveSpeakersAndQandA                                  controllers.Attic.doArchiveAllSpeakersQandA()
309   POST   /cfpadmin/attic/deleteInvitedSpeakers                                      controllers.Attic.deleteInvitedSpeakers()
310   POST   /cfpadmin/attic/resetNotified                                              controllers.Attic.resetNotified()
311   POST   /cfpadmin/attic/resetEvents                                                controllers.Attic.resetEvents()
312   POST   /cfpadmin/attic/deleteGoldenTickets                                        controllers.Attic.deleteGoldenTickets()
313   POST   /cfpadmin/attic/deleteWishlisted                                           controllers.Attic.deleteWishlist()
314   POST   /cfpadmin/attic/deleteFav                                                  controllers.Attic.deleteFavoriteTalks()
315   POST   /cfpadmin/attic/deleteRatings                                              controllers.Attic.deleteRatings()
316   POST   /cfpadmin/attic/doArchiveRatings                                           controllers.Attic.doArchiveRatings()
317   GET    /admin/goldenTickets                                                       controllers.GoldenTicketAdminController.showAll()
318   GET    /admin/goldenTickets/newTicket                                             controllers.GoldenTicketAdminController.newGoldenTicket()
319   GET    /admin/goldenTickets/newGroupOfTicket                                      controllers.GoldenTicketAdminController.newGroupOfGoldenTicket()
320   POST   /admin/goldenTickets/newTicket                                             controllers.GoldenTicketAdminController.saveGoldenTicket()
321   POST   /admin/goldenTickets/newTicket/importGroupOfGT                             controllers.GoldenTicketAdminController.importGroupOfGT()
322   POST   /admin/goldenTickets/newTicket/bulkImport                                  controllers.GoldenTicketAdminController.bulkImport()
323   GET    /admin/goldenTickets/votes                                                 controllers.GoldenTicketAdminController.showGoldenTicketVotes()
324   GET    /admin/goldenTickets/stats                                                 controllers.GoldenTicketAdminController.showStats()
325   GET    /admin/goldenTickets/repairStatsAfterGTArchivingAction                     controllers.GoldenTicketAdminController.repairStatsAfterGTArchivingAction()
326   POST   /admin/goldenTickets/$id<[^/]+>/unactivate                                 controllers.GoldenTicketAdminController.unactivateGoldenTicket(id:String)
327   POST   /admin/goldenTickets/$goldenTicketId<[^/]+>/sendEmail                      controllers.GoldenTicketAdminController.sendEmail(goldenTicketId:String)
328   GET    /cfp/goldenticket/proposals                                                controllers.GoldenTicketController.showAllProposals(page:Int ?= 0, sort:Option[String] ?= None, ascdesc:Option[String] ?= None, track:Option[String] ?= None)
329   GET    /cfp/goldenticket/myvotes                                                  controllers.GoldenTicketController.allMyGoldenTicketVotes(talkType:String ?= "conf")
330   GET    /cfp/goldenticket                                                          controllers.GoldenTicketController.authenticate()
331   POST   /cfp/goldenticket                                                          controllers.GoldenTicketController.doAuthenticate()
332   GET    /cfp/goldenticket/proposals/$proposalId<[^/]+>                             controllers.GoldenTicketController.openForReview(proposalId:String)
333   GET    /cfp/goldenticket/proposals/$proposalId<[^/]+>/vote                        controllers.GoldenTicketController.voteForProposal(proposalId:String)
334   GET    /cfp/goldenticket/proposals/$proposalId<[^/]+>/clearVote                   controllers.GoldenTicketController.clearVoteForProposal(proposalId:String)
335   GET    /cfp/goldenticket/proposals/$proposalId<[^/]+>/showvotes                   controllers.GoldenTicketController.showVotesForProposal(proposalId:String)
336   GET    /cfpadmin/rating                                                           controllers.RatingController.homeRating()
337   GET    /cfpadmin/postForBackup                                                    controllers.RatingController.postForBackup()
338   POST   /cfpadmin/rating                                                           controllers.RatingController.acceptVoteForTalk()
339   GET    /cfpadmin/allRatings                                                       controllers.RatingController.allRatings()
340   POST   /api/voting/v1/vote                                                        controllers.MobileVotingV1.acceptVoteForTalk()
341   GET    /api/voting/v1/talk/$talkId<[^/]+>                                         controllers.MobileVotingV1.allVotesForTalk(talkId:String)
342   GET    /api/voting/v1/top/talks                                                   controllers.MobileVotingV1.topTalks(day:Option[String] ?= None, talkTypeId:Option[String] ?= None, trackId:Option[String] ?= None, limit:Int ?= 10, floorPct:Int ?= 0, hideScoreLowerThan:Int ?= 3)
343   GET    /api/voting/v1/categories                                                  controllers.MobileVotingV1.categories()
344   GET    /toptalks                                                                  controllers.MobileVotingV1.topTalksAsHtml(day:Option[String] ?= None, talkTypeId:Option[String] ?= None, trackId:Option[String] ?= None, limit:Int ?= 50, floorPct:Int ?= 0, hideScoreLowerThan:Int ?= 3)
345   GET    /assets/$file<.+>                                                          controllers.Assets.at(path:String = "/public", file:String)
346   GET    /2017/$file<.+>                                                            controllers.BucketContentLoader.at(path:String = "/devoxx_content/2017", file:String)
347   GET    /bp/exportAgenda                                                           controllers.Backoffice.exportAgenda()
348   GET    /bp/fullAgenda                                                             controllers.Backoffice.exportAgenda()
349   GET    /rss/accepted                                                              controllers.RestAPI.RSSFeedAcceptedProposals()
350   GET    /sms/speakers                                                              controllers.SMSController.allSpeakers()
351   GET    /sms/talks                                                                 controllers.SMSController.sendTalksDetails(phoneNumber:String)
352   GET    /sms/welcome                                                               controllers.SMSController.sendWelcomeMessage(phoneNumber:String)
353   GET    /sms/callback                                                              controllers.SMSController.testCallback()
354   POST   /sms/callback                                                              controllers.SMSController.callback()
355   GET    /profilePicture/$filename<.+>                                              controllers.RestAPI.profilePicture(filename:String)
356   GET    /scheduler$path<.+>                                                        controllers.RestAPI.serveSchedulerWebApp(path:String)
357   GET    /app                                                                       controllers.RestAPI.serveScheduleWebApp(path:String = "index.html")
358   GET    /app/speakers                                                              controllers.RestAPI.serveSpeakersWebApp(path:String = "index.html")
359   GET    /app/speakers/                                                             controllers.RestAPI.serveSpeakersWebApp(path:String = "index.html")
360   GET    /app/speakers/$path<.+>                                                    controllers.RestAPI.serveSpeakersWebApp(path:String)
361   GET    /app/$path<.+>                                                             controllers.RestAPI.serveScheduleWebApp(path:String)
362   GET    /speakers$path<.+>                                                         controllers.RestAPI.serveSpeakersWebApp(path:String)
363   GET    /schedule                                                                  controllers.Publisher.serveSchedule(path:String = "")
364   GET    /schedule/                                                                 controllers.Publisher.serveSchedule(path:String = "")
365   GET    /schedule/$path<.+>                                                        controllers.Publisher.serveSchedule(path:String)
366   GET    /admin/rooms/import                                                        controllers.Backoffice.importRooms()
367   POST   /admin/rooms/saveAll                                                       controllers.Backoffice.saveImportRooms()
368   GET    /admin/talk/slots/import                                                   controllers.Backoffice.importTalkSlots()
369   POST   /admin/talk/slots/saveAll                                                  controllers.Backoffice.saveImportTalkSlots()
370   GET    /admin/break/slots/import                                                  controllers.Backoffice.importBreakSlots()
371   POST   /admin/break/slots/saveAll                                                 controllers.Backoffice.saveImportBreakSlots()
